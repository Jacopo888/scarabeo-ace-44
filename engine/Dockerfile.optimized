# ---------- STAGE 1: quackle-base (compila Quackle + genera GADDAG una volta sola) ----------
FROM ubuntu:22.04 AS quackle-base
SHELL ["/bin/bash", "-lc"]
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential cmake git ca-certificates pkg-config \
    # Qt5 + ICU + Boost per tool di build stile Colab (Piano C)
    qtbase5-dev qtchooser qtbase5-dev-tools \
    libicu-dev libboost-all-dev \
  && rm -rf /var/lib/apt/lists/*

WORKDIR /src

# Porta dentro il submodule e compila la static lib
COPY third_party/quackle/ /src/third_party/quackle/
# Build della static lib del submodule in /src/third_party/quackle/build
RUN cmake -S /src/third_party/quackle -B /src/third_party/quackle/build -DCMAKE_BUILD_TYPE=RelWithDebInfo \
 && cmake --build /src/third_party/quackle/build -j

# ==== costruisci SOLO makegaddag_tool (stile Colab) e genera GADDAG ====
# Copia la wordlist sorgente (testo, uppercase)
COPY lexica_src/enable1.txt /src/enable1.txt

# Manually build makegaddag_tool (no CMake target provided upstream)
RUN set -euo pipefail; \
  cd /src/third_party/quackle; \
  LIB="$(find /src/third_party/quackle/build -type f -name 'liblibquackle.a' | head -n1)"; \
  test -n "$LIB"; echo "Using lib: $LIB"; \
  INCS="-I/src/third_party/quackle -I/src/third_party/quackle/include -I/src/third_party/quackle/libquackle -I/src/third_party/quackle/quackleio -I/src/third_party/quackle/makegaddag -I/src/third_party/quackle/src -I/src/third_party/quackle/src/libquackle -I/src/third_party/quackle/src/libquackle/include"; \
  ICU_CFLAGS="$(pkg-config --cflags icu-uc icu-i18n 2>/dev/null || true)"; \
  ICU_LIBS="$(pkg-config --libs   icu-uc icu-i18n 2>/dev/null || echo '-licuuc -licui18n')"; \
  QT_CFLAGS="$(pkg-config --cflags Qt5Core 2>/dev/null || true)"; \
  QT_LIBS="$(pkg-config --libs   Qt5Core   2>/dev/null || echo '-lQt5Core')"; \
  CXXFLAGS="-O3 -std=c++17 -fPIC"; \
  LATE_LIBS="-lpthread -lboost_regex -lboost_filesystem -lboost_system $ICU_LIBS $QT_LIBS"; \
  mkdir -p /tmp/quackle_bin /tmp/quackle_obj; \
  QIO_SRCS="quackleio/dawgfactory.cpp quackleio/dict.cpp quackleio/dictfactory.cpp quackleio/dictimplementation.cpp quackleio/flexiblealphabet.cpp quackleio/froggetopt.cpp quackleio/gcgio.cpp quackleio/queenie.cpp quackleio/streamingreporter.cpp quackleio/util.cpp alphabetparameters.cpp"; \
  for f in $QIO_SRCS; do \
    base="$(basename "$f" .cpp)"; \
    g++ $CXXFLAGS $INCS $ICU_CFLAGS $QT_CFLAGS -c "$f" -o "/tmp/quackle_obj/${base}.o"; \
  done; \
  g++ $CXXFLAGS $INCS $ICU_CFLAGS $QT_CFLAGS -c makegaddag/makegaddag.cpp -o /tmp/quackle_obj/makegaddag_main.o; \
  OBJS=$(ls /tmp/quackle_obj/*.o | grep -v 'makegaddag_main.o' || true); \
  g++ /tmp/quackle_obj/makegaddag_main.o $OBJS "$LIB" -o /tmp/quackle_bin/makegaddag_tool $LATE_LIBS; \
  ls -lh /tmp/quackle_bin/makegaddag_tool; \
  # Generate the GADDAG
  mkdir -p /tmp/lexicon_build; \
  cp -f /src/enable1.txt /tmp/lexicon_build/wordlist.txt; \
  cd /src/third_party/quackle/makegaddag; \
  ln -sf /tmp/lexicon_build/wordlist.txt gaddaginput.raw; \
  /tmp/quackle_bin/makegaddag_tool 1>/tmp/gadd.stdout 2>/tmp/gadd.stderr || true; \
  echo "=== GADDAG Generation Output ==="; \
  echo "stdout:"; tail -n +1 /tmp/gadd.stdout || true; \
  echo "stderr:"; tail -n +1 /tmp/gadd.stderr || true; \
  if [ -f "output.gaddag" ] && [ -s "output.gaddag" ]; then \
    echo "GADDAG generated successfully"; \
    ls -lh output.gaddag; \
    mkdir -p /out_lexica && cp -f output.gaddag /out_lexica/enable1.gaddag; \
  else \
    echo "FATAL: GADDAG generation failed (manual tool)"; \
    exit 1; \
  fi; \
  echo "Final GADDAG:"; ls -lh /out_lexica/enable1.gaddag;

# Sanity check: esistenza di liblibquackle.a e struttura file (niente /src richiesto)
RUN test -f /src/third_party/quackle/build/liblibquackle.a
RUN ls -la /src/third_party/quackle | head -n 50

# ---------- STAGE 2: wrapper-normal (compila solo il wrapper normale) ----------
FROM quackle-base AS wrapper-normal
WORKDIR /src

# Build del wrapper normale (ottimizzato per produzione)
COPY quackle_wrapper/ /src/quackle_wrapper/
RUN cmake -S /src/quackle_wrapper -B /build \
      -DQUACKLE_ROOT=/src/third_party/quackle \
      -DQUACKLE_BUILD_DIR=/src/third_party/quackle/build \
      -DCMAKE_BUILD_TYPE=RelWithDebInfo \
      -DCMAKE_CXX_FLAGS="-g -O2 -DNDEBUG" \
 && cmake --build /build -j \
 && echo "Normal wrapper built with debug symbols for diagnostics"

# ---------- STAGE 3: wrapper-asan (compila solo il wrapper ASAN) ----------
FROM quackle-base AS wrapper-asan
WORKDIR /src

# Build del wrapper ASAN (ottimizzato per debug)
COPY quackle_wrapper/ /src/quackle_wrapper/
RUN cmake -S /src/quackle_wrapper -B /build \
    -DQUACKLE_ROOT=/src/third_party/quackle \
    -DQUACKLE_BUILD_DIR=/src/third_party/quackle/build \
    -DCMAKE_BUILD_TYPE=Debug \
    -DCMAKE_CXX_FLAGS="-O1 -g -fno-omit-frame-pointer -fsanitize=address" \
    -DCMAKE_EXE_LINKER_FLAGS="-fsanitize=address" && \
    cmake --build /build -j && \
    echo "ASAN wrapper built"

# ---------- STAGE 4: runtime (copia da quackle-base + wrapper-normal) ----------
FROM ubuntu:22.04 AS runtime
SHELL ["/bin/bash","-lc"]

# Install Python 3.10 (default on Ubuntu 22.04) and minimal dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3 \
    python3-pip \
    python3-venv \
    tini \
    libstdc++6 \
    ca-certificates \
    # Essential runtime libs for Quackle (exact Ubuntu 22.04 packages)
    libqt5core5a \
    libicu70 \
    libgcc-s1 \
    libboost-regex1.74.0 \
    libboost-filesystem1.74.0 \
    libboost-system1.74.0 \
    util-linux \
    gdb \
    file \
 && rm -rf /var/lib/apt/lists/*

ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PORT=8080 \
    RULESET=en \
    GADDAG_PATH=/app/lexica/enable1.gaddag

WORKDIR /app

# app python
COPY pyproject.toml /app/pyproject.toml
RUN pip install --no-cache-dir -e .
COPY app/ /app/app/

# copia wrapper e lexicon generato baked-in
RUN mkdir -p /app/bin /app/lexica
COPY --from=wrapper-normal /build/engine_wrapper /app/bin/engine_wrapper
COPY --from=quackle-base /out_lexica/enable1.gaddag /app/lexica/enable1.gaddag
# bring the source wordlist to runtime for empty-board fast path
RUN mkdir -p /app/lexica_src
COPY --from=quackle-base /src/enable1.txt /app/lexica_src/enable1.txt

# bring the alphabet file to runtime (many loaders expect it around)
RUN mkdir -p /app/alphabets
COPY --from=quackle-base /src/third_party/quackle/data/alphabets/english.quackle_alphabet /app/alphabets/english.quackle_alphabet
ENV QUACKLE_ALPHABET=/app/alphabets/english.quackle_alphabet
COPY --from=quackle-base /src/third_party/quackle/data /usr/share/quackle/data
ENV QUACKLE_APPDATA_DIR=/usr/share/quackle/data

ENV GADDAG_PATH=/app/lexica/enable1.gaddag

# Sanity check: verifica che il file GADDAG esista e non sia vuoto
RUN test -s /app/lexica/enable1.gaddag && ls -lh /app/lexica/enable1.gaddag

COPY scripts/init_lexicon.sh /app/scripts/init_lexicon.sh
COPY scripts/verify_runtime.sh /app/scripts/verify_runtime.sh
COPY scripts/route_discovery.sh /app/scripts/route_discovery.sh
COPY scripts/exec_ping.sh       /app/scripts/exec_ping.sh
COPY scripts/debug_gaddag.sh    /app/scripts/debug_gaddag.sh
COPY scripts/smoke_test.sh      /app/scripts/smoke_test.sh
COPY scripts/smoke_test_en.sh   /app/scripts/smoke_test_en.sh

# Critical smoke test: must load GADDAG and answer ping; fail build otherwise
# NOTE: Only ping test during build - compute tests moved to runtime to avoid segfault masking
RUN chmod +x /app/scripts/*.sh \
 && /app/scripts/init_lexicon.sh \
 && /app/scripts/verify_runtime.sh \
 && echo "=== CRITICAL SMOKE TEST: GADDAG must load and respond to ping (EN) ===" \
 && timeout 30s bash -c 'echo '\''{"op":"ping"}'\'' | /app/bin/engine_wrapper --gaddag /app/lexica/enable1.gaddag --ruleset en' \
 && echo "✓ GADDAG SMOKE TEST PASSED (EN)" \
 && echo "✓ Build completed - compute tests will run at runtime"

EXPOSE 8080
ENTRYPOINT ["/usr/bin/tini","--"]
CMD ["python3", "-m", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8080", "--workers", "1", "--timeout-keep-alive", "5"]

# ---------- STAGE 5: runtime-asan (copia da quackle-base + wrapper-asan + installa libasan6) ----------
FROM ubuntu:22.04 AS runtime-asan
SHELL ["/bin/bash","-lc"]
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3 python3-pip python3-venv tini libstdc++6 ca-certificates \
    libqt5core5a libicu70 libgcc-s1 libboost-regex1.74.0 libboost-filesystem1.74.0 libboost-system1.74.0 \
    gdb file libasan6 && rm -rf /var/lib/apt/lists/*

WORKDIR /app
ENV PYTHONDONTWRITEBYTECODE=1 PYTHONUNBUFFERED=1 PORT=8080 RULESET=en \
    QUACKLE_ALPHABET=/app/alphabets/english.quackle_alphabet \
    QUACKLE_APPDATA_DIR=/usr/share/quackle/data \
    GADDAG_PATH=/app/lexica/enable1.gaddag \
    ASAN_OPTIONS=abort_on_error=1:halt_on_error=1:detect_leaks=0:symbolize=1:malloc_context_size=50

COPY pyproject.toml /app/pyproject.toml
RUN pip install --no-cache-dir -e .
COPY app/ /app/app/
RUN mkdir -p /app/bin /app/lexica /app/alphabets /usr/share/quackle/data

# copy assets from quackle-base stage (shared)
COPY --from=quackle-base /src/third_party/quackle/data/alphabets/english.quackle_alphabet /app/alphabets/english.quackle_alphabet
COPY --from=quackle-base /out_lexica/enable1.gaddag /app/lexica/enable1.gaddag
COPY --from=quackle-base /src/third_party/quackle/data /usr/share/quackle/data

# ASAN wrapper binary
COPY --from=wrapper-asan /build/engine_wrapper /app/bin/engine_wrapper

# keep entrypoint identical
EXPOSE 8080
ENTRYPOINT ["/usr/bin/tini","--"]
CMD ["python3","-m","uvicorn","app.main:app","--host","0.0.0.0","--port","8080","--workers","1","--timeout-keep-alive","5"]


